<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>cube</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.min.js"></script>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src='https://threejs.org/examples/js/controls/OrbitControls.js'></script>
    <script src='https://threejs.org/examples/js/controls/FirstPersonControls.js'></script>
    <script src='https://threejs.org/examples/js/loaders/OBJLoader.js'></script>
    <script src='https://threejs.org/examples/js/loaders/MTLLoader.js'></script>
    <script src="js/threex.domevents.js"></script>

    <style>
        body { margin: 0; }
        canvas { width: 100%; height: 100% }
    </style>
</head>
<body>
    <script>
        var scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xc9a26c );
		scene.fog = new THREE.Fog( 0xc9a26c, 500, 10000 );
        var aspect = window.innerWidth / window.innerHeight;
        // camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 10000 );
        // camera.position.set( 1000, 50, 1500 );
        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 20000 );
        var clock = new THREE.Clock();

        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        function loadSpaceshipOBJ(materials) {
            var loader = new THREE.OBJLoader();
            loader.setMaterials(materials);
            console.log(materials);
            loader.load('obj/spaceship/spaceship.obj', function (obj) {
                obj.rotation.z += Math.PI/2;
                obj.scale.set(6,6,6);
                scene.add(obj);
                }, function(xhr) {
                    console.log('OBJLoader: ', xhr.loaded / xhr.total * 100, '% loaded');
                }, function(error) {
                    console.log(error);
                }
            );
        }

        function loadGroundOBJ() {
            var loader = new THREE.OBJLoader();
            loader.load('obj/mars/mars.obj', function (obj) {
                obj.rotation.x -= Math.PI/2;
                obj.position.y = -12;

                var texture = new THREE.TextureLoader().load('obj/mars/diffuse.png');
                obj.traverse(function (child) {
                    if (child instanceof THREE.Mesh) {
                        child.material.map = texture;
                    }
                });
                scene.add(obj);
                }, function(xhr) {
                    console.log('OBJLoader: ', xhr.loaded / xhr.total * 100, '% loaded');
                }, function(error) {
                    console.log(error);
                }
            );
        }

        function loadSpaceshipMTL() {
            mtlLoader = new THREE.MTLLoader();
            mtlLoader.load('obj/spaceship/spaceship.mtl', function (materials) {
                materials.preload();
                loadSpaceshipOBJ(materials);
            }, function (xhr) {
                console.log('MTLLoader: ', xhr.loaded / xhr.total * 100, '% loaded');
            }, function (error) {
                console.error(error);
            });
        }

        loadSpaceshipMTL();
        loadGroundOBJ()

        // orbit controller
        // var controls = new THREE.OrbitControls(camera, renderer.domElement);
        // controls.maxPolarAngle = Math.PI * 0.45;
        // controls.minDistance = 30;
        // controls.maxDistance = 800;
        // controls.mouseButtons = {
	    //     LEFT: THREE.MOUSE.ROTATE,
	    //     MIDDLE: THREE.MOUSE.DOLLY,
	    //     RIGHT: THREE.MOUSE.PAN
        // }
        // controls.update();

        // person controller
        var controls = new THREE.FirstPersonControls( camera, renderer.domElement );
        controls.movementSpeed = 500;
        controls.lookSpeed = 0.125;
        controls.lookVertical = true;
        


        // 카메라 시작 각도 조절
        camera.position.set( 80, 100, 150 );
        camera.lookAt(scene.position);
        camera.up.set(0, 1, 0);
        camera.updateProjectionMatrix();

        scene.add( new THREE.AmbientLight( 0x666666 ) );
        var light = new THREE.DirectionalLight( 0xdfebff, 1 );
        light.position.set( 50, 200, 100 );
        light.position.multiplyScalar( 1.3 );
        light.castShadow = true;
        light.shadow.mapSize.width = 1024;
        light.shadow.mapSize.height = 1024;
        var d = 300;
        light.shadow.camera.left = - d;
        light.shadow.camera.right = d;
        light.shadow.camera.top = d;
        light.shadow.camera.bottom = - d;
        light.shadow.camera.far = 1000;
        scene.add( light );

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
            controls.handleResize();
        }

        function render() {
            requestAnimationFrame( render );
            // controls.update();
            window.addEventListener( 'resize', onWindowResize, false );
            controls.update( clock.getDelta() );
            renderer.render( scene, camera );
        }

        render();
    </script>
</body>
</html>