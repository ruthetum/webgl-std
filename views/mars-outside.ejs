<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mars Outside</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.min.js"></script>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src='https://threejs.org/examples/js/controls/OrbitControls.js'></script>
    <script src='https://threejs.org/examples/js/loaders/OBJLoader.js'></script>
    <script src='https://threejs.org/examples/js/loaders/MTLLoader.js'></script>
    <script src="js/threex.domevents.js"></script>

    <style>
        body { margin: 0; overflow: hidden; }
        canvas { height:100%; width: 100%; }
        .connect-form {
            position:absolute;
            background-color: aliceblue;
            border: 1px black solid;
            right:0;
            z-index: 5;
        }
    </style>
</head>
<body>
    <script>
        var scene = new THREE.Scene();
        var aspect = window.innerWidth / window.innerHeight;
        camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 10000 );
		camera.position.set( 100, 50, 150 );

        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        var imageLoader = new THREE.TextureLoader();
        imageLoader.load("img/galaxy.png", data => {
            var material_nuiv = new THREE.MeshBasicMaterial({
                map: data,
                side: THREE.BackSide
            })
            var geometry_nuiv = new THREE.SphereGeometry(400, 32, 32);
            mesh = new THREE.Mesh(geometry_nuiv, material_nuiv);
            scene.add(mesh)
        });

        var geometry = new THREE.SphereGeometry(25, 32, 32)
        var material = new THREE.MeshBasicMaterial();
        material.map = new THREE.ImageUtils.loadTexture('img/marsmap1k.jpg');
        material.bumpMap = new THREE.ImageUtils.loadTexture('img/marsbump1k.jpg');     
        material.bumpScale = 0.05;
        var mars = new THREE.Mesh( geometry, material );
        mars.position.x = -50;
        mars.position.y = 5;
        scene.add(mars);

        // orbit controller
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI * 0.48;
        controls.minDistance = 30;
        controls.maxDistance = 500;
        controls.update();


        // 카메라 시작 각도 조절
        camera.position.set( -100, 50, 150 );
        camera.lookAt(scene.position);
        camera.up.set(0, 1, 0);
        camera.updateProjectionMatrix();

        scene.add( new THREE.AmbientLight( 0x666666 ) );
        var light = new THREE.DirectionalLight( 0xdfebff, 1 );
        light.position.set( 50, 200, 100 );
        light.position.multiplyScalar( 1.3 );
        light.castShadow = true;
        light.shadow.mapSize.width = 1024;
        light.shadow.mapSize.height = 1024;
        var d = 300;
        light.shadow.camera.left = - d;
        light.shadow.camera.right = d;
        light.shadow.camera.top = d;
        light.shadow.camera.bottom = - d;
        light.shadow.camera.far = 1000;
        scene.add( light );


        function render(time) {
            time *= 0.0002;
            mars.rotation.y = time;

            requestAnimationFrame( render );
            controls.update();
            renderer.render( scene, camera );
        }

        render();
    </script>
</body>
</html>