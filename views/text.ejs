<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>text</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.min.js"></script>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src='https://threejs.org/examples/js/controls/OrbitControls.js'></script>
    <script src='https://threejs.org/examples/js/loaders/OBJLoader.js'></script>
    <script src='https://threejs.org/examples/js/loaders/MTLLoader.js'></script>
    <script src="js/threex.domevents.js"></script>

    <style>
        body { margin: 0; overflow: hidden; }
        canvas { height:100%; width: 100%; }
    </style>
</head>
<body>
    <script>
        var scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xf0f0f0 );
		scene.fog = new THREE.Fog( 0x111111, 500, 10000 );
        var aspect = window.innerWidth / window.innerHeight;
        camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 10000 );
		camera.position.set( 1000, 50, 1500 );

        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);


        const loader = new THREE.FontLoader();
        loader.load("fonts/helvetiker.json", function ( font ) {
            const color = 0x006699;

            const matDark = new THREE.LineBasicMaterial( {
                color: color,
                side: THREE.DoubleSide
            } );

            const matLite = new THREE.MeshBasicMaterial( {
                color: color,
                transparent: true,
                opacity: 0.4,
                side: THREE.DoubleSide
            } );

            const message = "   Three.js\nSimple text.";

            const shapes = font.generateShapes( message, 100 );

            const geometry = new THREE.ShapeBufferGeometry( shapes );

            geometry.computeBoundingBox();

            const xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );

            geometry.translate( xMid, 0, 0 );

            // make shape ( N.B. edge view not visible )

            const text = new THREE.Mesh( geometry, matLite );
            text.position.z = - 150;
            scene.add( text );

            // make line shape ( N.B. edge view remains visible )

            const holeShapes = [];

            for ( let i = 0; i < shapes.length; i ++ ) {

                const shape = shapes[ i ];

                if ( shape.holes && shape.holes.length > 0 ) {

                    for ( let j = 0; j < shape.holes.length; j ++ ) {

                        const hole = shape.holes[ j ];
                        holeShapes.push( hole );

                    }

                }

            }

            shapes.push.apply( shapes, holeShapes );

            const lineText = new THREE.Object3D();

            for ( let i = 0; i < shapes.length; i ++ ) {

                const shape = shapes[ i ];

                const points = shape.getPoints();
                const geometry = new THREE.BufferGeometry().setFromPoints( points );

                geometry.translate( xMid, 0, 0 );

                const lineMesh = new THREE.Line( geometry, matDark );
                lineText.add( lineMesh );

            }

            scene.add( lineText );

            } );

        var spotLight = new THREE.SpotLight( 0xffffff );
        spotLight.position.set( -10, 2, 0 );
        scene.add( spotLight );

        // orbit controller
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI * 0.48;
        // controls.minDistance = 30;
        // controls.maxDistance = 10000;
        controls.update();


        // 카메라 시작 각도 조절
        camera.position.set( -100, 50, 150 );
        camera.lookAt(scene.position);
        camera.up.set(0, 1, 0);
        camera.updateProjectionMatrix();

        var ambientLight = new THREE.AmbientLight( 0x666666 );
        scene.add( ambientLight );

        function render() {
            requestAnimationFrame( render );
            controls.update();
            renderer.render( scene, camera );
        }

        render();
    </script>
</body>
</html>